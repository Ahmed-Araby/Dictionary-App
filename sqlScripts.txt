/* create the data base*/
create database dictionaryApp;

/* *** create tables *** */
/*user table*/
create TABLE users(
    user_id integer not null AUTO_INCREMENT, 
    user_name varchar(128) not null,
    first_name varchar(128) not null, 
    last_name varchar(128), 
    password varchar(128) not null,
    
    PRIMARY KEY (user_id)
)ENGINE=InnoDB CHARSET = utf8;



/*word table*/
create table words(
    word_id integer not null AUTO_INCREMENT, 
    word varchar(128) not null, 
    word_lang varchar(128) not null,
    
    PRIMARY key (word_id)
);

/* pairs 
this table will store pair of words 
that the user entered and get as a result 
from translation and also the id of the user that 
they belongs to

the server have to make sure to put 
word1 and word2 in a uniform way 
which mean compre the words and get the smaller in asci code 
first then get the keys for each then push into the pairs table
*/

create table pairs (
    word1_fk varchar(128) not null, 
    word2_fk varchar(128) not null,
    user_fk integer not null, 
    add_dateTime datetime,
    
    FOREIGN KEY (word1_fk) REFERENCES words (word_id)
    on DELETE CASCADE
    on UPDATE CASCADE,
    
    FOREIGN KEY (word2_fk) REFERENCES words (word_id)
    on delete CASCADE
    on UPDATE CASCADE,
    
    FOREIGN KEY (user_fk) REFERENCES users (user_id)
    on DELETE CASCADE
    on UPDATE CASCADE,
    
    constraint pair_pk primary key (word1_fk, word2_fk, user_fk)
);



/*populating the data base for
testing */

insert into users (user_name , first_name, last_name, password) 
values('ahmed', 'ahmed' , 'araby', '1234');



/* Stored procedures*/


/* retrive the results for non filtred table */
DELIMITER $$

create PROCEDURE getRows(
    in in_user_id integer, 
    in lastDateTime DATETIME, 
    in rowsLimit integer 
    )
    
BEGIN

    CREATE TEMPORARY TABLE first_half
    select word1_fk, word2_fk, add_dateTime, word as word1, word_lang as word1_lang 
    from pairs 
    INNER JOIN words 
    on word1_fk = word_id
    where user_fk = in_user_id and add_dateTime > lastDateTime
    LIMIT rowsLimit;


    select word1, word1_lang, word1_fk, word as word2 , word_lang as word2_lang, word2_fk , add_dateTime
    from first_half 
    inner join words 
    on word2_fk = word_id
    order by add_dateTime
    Limit rowsLimit;
    
    drop TEMPORARY table first_half;

end$$

DELIMITER ;


/*retrive the result for filtered table*/

DELIMITER $$

create PROCEDURE getRowsFiltered(
    in in_user_id integer,
    in lang1 varchar(128) , 
    in lang2 varchar(128) , 
    in start_dateTime DATETIME, 
    in end_dateTime DATETIME,
    in last_dateTime DATETIME, 
    in rowsLimit integer
    )
    
BEGIN

    CREATE TEMPORARY TABLE first_half
    select word1_fk, word2_fk, add_dateTime, word as word1, word_lang as word1_lang 
    from pairs 
    INNER JOIN words 
    on word1_fk = word_id
    where user_fk = in_user_id and
    
    add_dateTime > last_dateTime and
    add_dateTime >= start_dateTime and add_dateTime <= end_dateTime and 
    
    ( word_lang = lang1 or word_lang = lang2) 
    limit rowsLimit;

    select word1, word1_lang, word1_fk, word as word2 , word_lang as word2_lang, word2_fk , add_dateTime
    from first_half 
    inner join words 
    on word2_fk = word_id
    where ( word_lang = lang1 or word_lang = lang2)
    order by add_dateTime
    limit rowsLimit;

    
   drop TEMPORARY table first_half;

end$$

DELIMITER ;



/*
some queries for 
inserting data or testing the procedures 
*/

call getRowsFiltered(8, 'en', 'ar', '2020-10-04 20:13:50', '2020-10-04 20:13:50', 1);
call getRows(8, '2020-10-04 20:13:50', 5);
- example of the date time format , 24 hour format
2001-12-1 20:14:21
